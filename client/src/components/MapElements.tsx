
export const MAP_ELEMENTS = {
  // Roads and paths
  roads: {
    horizontal: "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
    vertical: "‚ïë\n‚ïë\n‚ïë\n‚ïë\n‚ïë\n‚ïë\n‚ïë\n‚ïë\n‚ïë\n‚ïë",
    intersection: "‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê\n   ‚ïë   \n   ‚ïë   \n   ‚ïë   ",
    curve_tl: "‚ïê‚ïê‚ïê‚ïó\n   ‚ïë\n   ‚ïë\n   ‚ïë",
    curve_tr: "‚ïî‚ïê‚ïê‚ïê\n‚ïë   \n‚ïë   \n‚ïë   ",
    curve_bl: "   ‚ïë\n   ‚ïë\n   ‚ïë\n‚ïê‚ïê‚ïê‚ïù",
    curve_br: "‚ïë   \n‚ïë   \n‚ïë   \n‚ïö‚ïê‚ïê‚ïê",
    highway: "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
  },

  // Trees and nature
  trees: {
    oak: "    üå≥\n   /|\\\n  / | \\\n /  |  \\\n|   |   |\n    |",
    pine: "   üå≤\n  /|\\\n / | \\\n/  |  \\\n   |",
    small_tree: "  üåø\n  /|\\\n   |",
    forest: "üå≤ üå≥ üå≤\nüåø   üåø üå≥\n  üå≤   üåø",
    bush: "üåøüåøüåø\nüåøüåøüåø",
    flower: "üå∏üåºüåª\nüåøüåøüåø",
    birch: "üå≥",
    jungle: "üå¥",
    cactus: "üåµ",
    mushroom: "üçÑ",
    bamboo: "üéã"
  },

  // Buildings
  houses: {
    small_house: "   üè†\n  /^\\\n /   \\\n|  ‚ö´  |\n|_____|",
    large_house: "    üè†\n   /^^^\\\n  /     \\\n |  ‚ö´   |\n |   ‚ö´  |\n |_______|",
    apartment: "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ‚ö´ ‚ö´ ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ‚ö´ ‚ö´ ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ‚ö´ ‚ö´ ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò",
    shop: "  SHOP  \n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ ‚ö´   ‚ö´ ‚îÇ\n‚îÇ   ‚ö´   ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò",
    church: "    ‚úù\n   /|\\\n  /‚îÄ‚î¥‚îÄ\\\n |     |\n |  ‚ö´  |\n |_____|"
  },

  // Infrastructure
  infrastructure: {
    bridge: "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\n~~~~~~~~~~~~~~~\n‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
    parking: "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ üöó   üöó ‚îÇ\n‚îÇ         ‚îÇ\n‚îÇ üöó   üöó ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò",
    fountain: "  ‚õ≤\n ‚ïî‚ïê‚ïê‚ïê‚ïó\n ‚ïë ‚à© ‚ïë\n ‚ïë‚à© ‚à©‚ïë\n ‚ïö‚ïê‚ïê‚ïê‚ïù",
    streetlight: "üí°\n |\n |\n |\n‚ñì‚ñì‚ñì",
    bench: "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n‚îÇ      ‚îÇ\n‚îÇ      ‚îÇ\n‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥"
  },

  // Vehicles
  vehicles: {
    car: "üöó",
    truck: "üöõ",
    bus: "üöå",
    bike: "üö≤"
  },

  // Landscape features
  landscape: {
    river: "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
    lake: "~~~~~~~~~~~~~~~~~~~~\n~~   üåä  ~~~  üåä  ~~\n~~  üåä    ~~~    üåä~~\n~~üåä  ~~~  üåä  ~~~üåä~~\n~~  üåä  ~~~  üåä  ~~~~ \n~~~~~~~~~~~~~~~~~~~~",
    mountain: "      ‚õ∞Ô∏è\n     /‚ñ≤\\\n    /‚ñ≤‚ñ≤‚ñ≤\\\n   /‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤\\\n  /‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤\\\n /‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤\\\n‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤",
    hill: "   ‚õ∞Ô∏è\n  /‚ñ≤‚ñ≤\\\n /‚ñ≤‚ñ≤‚ñ≤‚ñ≤\\\n‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤"
  },

  // Minecraft-style blocks
  blocks: {
    grass: "üü©",
    dirt: "üü´",
    stone: "‚¨ú",
    wood: "üü§",
    diamond: "üíé",
    gold: "üü°",
    iron: "‚ö™",
    coal: "‚ö´",
    emerald: "üíö",
    redstone: "üî¥",
    water: "üü¶",
    lava: "üü•",
    sand: "üü®",
    snow: "‚¨ú"
  },

  // Animals and mobs
  mobs: {
    pig: "üê∑",
    cow: "üêÑ",
    sheep: "üêë",
    chicken: "üêî",
    horse: "üê¥",
    wolf: "üê∫",
    cat: "üê±",
    villager: "üë®‚Äçüåæ",
    zombie: "üßü",
    skeleton: "üíÄ",
    creeper: "üíö",
    spider: "üï∑Ô∏è"
  }
};

interface MapElementsProps {
  onSelectElement: (content: string) => void;
  isVisible: boolean;
  onToggle: () => void;
}

export function MapElements({ onSelectElement, isVisible, onToggle }: MapElementsProps) {
  if (!isVisible) {
    return null;
  }

  return (
    <div className="fixed bottom-4 left-4 bg-white border rounded-lg shadow-lg max-h-96 overflow-y-auto z-50">
      <div className="p-3 border-b bg-green-50">
        <div className="flex justify-between items-center">
          <h3 className="font-semibold text-green-800">üó∫Ô∏è Map Elements</h3>
          <button
            onClick={onToggle}
            className="text-gray-500 hover:text-gray-700"
          >
            ‚úï
          </button>
        </div>
      </div>
      
      <div className="p-3 space-y-4 max-w-sm">
        {Object.entries(MAP_ELEMENTS).map(([category, elements]) => (
          <div key={category}>
            <h4 className="text-sm font-medium text-gray-700 mb-2 capitalize">
              {category.replace('_', ' ')}
            </h4>
            <div className="grid grid-cols-2 gap-2">
              {Object.entries(elements).map(([name, content]) => (
                <button
                  key={name}
                  onClick={() => onSelectElement(content)}
                  className="p-2 border border-gray-200 rounded text-xs hover:bg-gray-50 hover:border-gray-300 transition-colors text-left"
                  title={name.replace('_', ' ')}
                >
                  <div className="whitespace-pre-wrap font-mono text-xs leading-tight">
                    {content.split('\n').slice(0, 3).join('\n')}
                    {content.split('\n').length > 3 && '...'}
                  </div>
                  <div className="text-gray-500 mt-1 text-xs">
                    {name.replace('_', ' ')}
                  </div>
                </button>
              ))}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
